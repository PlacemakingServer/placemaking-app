🔎 Dump de Estrutura – Projeto Next.js
Raiz do projeto : ./src/repositories/server
Gerado em       : Thu Apr 24 09:39:39 -03 2025
------------------------------------------------------------

📄 Arquivo : activityAnswerApi.ts
📂 Pasta   : .
🧭 Caminho : activityAnswerApi.ts
--------------------------------------
📜 Conteúdo:

import { ActivityAnswer } from '@/lib/types/indexeddb';

const baseUrl = '/api/activity-answers'; // ⚠️ Este endpoint ainda NÃO está implementado em /pages/api

export async function getActivityAnswers(): Promise<ActivityAnswer[]> {
  const res = await fetch(baseUrl);
  if (!res.ok) throw new Error('Erro ao buscar respostas de atividade');
  return res.json();
}

export async function getActivityAnswerById(id: string): Promise<ActivityAnswer> {
  const res = await fetch(`${baseUrl}/${id}`);
  if (!res.ok) throw new Error('Erro ao buscar resposta de atividade');
  return res.json();
}

export async function createActivityAnswer(data: ActivityAnswer): Promise<ActivityAnswer> {
  const res = await fetch(baseUrl, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao criar resposta');
  return res.json();
}

export async function updateActivityAnswer(id: string, data: Partial<ActivityAnswer>): Promise<ActivityAnswer> {
  const res = await fetch(`${baseUrl}/${id}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao atualizar resposta');
  return res.json();
}

export async function deleteActivityAnswer(id: string): Promise<{ message: string }> {
  const res = await fetch(`${baseUrl}/${id}`, {
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
  });
  if (!res.ok) throw new Error('Erro ao deletar resposta');
  return res.json();
}

============================================================


📄 Arquivo : dynamicSurveyApi.ts
📂 Pasta   : .
🧭 Caminho : dynamicSurveyApi.ts
--------------------------------------
📜 Conteúdo:

// src/repositories/server/dynamicSurveyApi.ts
import { DynamicSurvey } from '@/lib/types/indexeddb';

const baseUrl = '/api/surveys/dynamic'; // ⚠️ Este endpoint ainda NÃO está implementado em /pages/api

export async function getDynamicSurveys(): Promise<DynamicSurvey[]> {
  const res = await fetch(baseUrl);
  if (!res.ok) throw new Error('Erro ao buscar surveys dinâmicos');
  return res.json();
}

export async function createDynamicSurvey(data: DynamicSurvey): Promise<DynamicSurvey> {
  const res = await fetch(baseUrl, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao criar survey dinâmico');
  return res.json();
}


============================================================


📄 Arquivo : fieldApi.ts
📂 Pasta   : .
🧭 Caminho : fieldApi.ts
--------------------------------------
📜 Conteúdo:

import { Field } from '@/lib/types/indexeddb';

const baseUrl = '/api/fields';

export async function getFields(survey_id: string, survey_type: string): Promise<Field[]> {
  const url = `${baseUrl}?survey_id=${survey_id}&survey_type=${survey_type}`;
  const res = await fetch(url);
  if (!res.ok) throw new Error('Erro ao buscar campos');
  return res.json();
}

export async function createField(data: Field): Promise<Field> {
  const res = await fetch(`${baseUrl}/create`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao criar campo');
  return res.json();
}

export async function updateField(data: Field): Promise<Field> {
  const res = await fetch(`${baseUrl}/update`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao atualizar campo');
  return res.json();
}

export async function deleteField(params: { field_id: string, survey_id: string, survey_type: string }): Promise<{ message: string }> {
  const res = await fetch(`${baseUrl}/delete?` + new URLSearchParams(params), {
    method: 'DELETE',
  });
  if (!res.ok) throw new Error('Erro ao deletar campo');
  return res.json();
}

============================================================


📄 Arquivo : fieldOptionApi.ts
📂 Pasta   : .
🧭 Caminho : fieldOptionApi.ts
--------------------------------------
📜 Conteúdo:

// src/repositories/server/fieldOptionApi.ts
import { FieldOption } from '@/lib/types/indexeddb';

const baseUrl = '/api/field-options'; // ⚠️ Este endpoint ainda NÃO está implementado em /pages/api

export async function getFieldOptions(field_id: string): Promise<FieldOption[]> {
  const res = await fetch(`${baseUrl}?field_id=${field_id}`);
  if (!res.ok) throw new Error('Erro ao buscar opções do campo');
  return res.json();
}

export async function createFieldOption(data: FieldOption): Promise<FieldOption> {
  const res = await fetch(baseUrl, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao criar opção do campo');
  return res.json();
}


============================================================


📄 Arquivo : formSurveyApi.ts
📂 Pasta   : .
🧭 Caminho : formSurveyApi.ts
--------------------------------------
📜 Conteúdo:

// src/repositories/server/formSurveyApi.ts
import { FormSurvey } from '@/lib/types/indexeddb';

const baseUrl = '/api/surveys/form'; // ⚠️ Este endpoint ainda NÃO está implementado em /pages/api

export async function getFormSurveys(): Promise<FormSurvey[]> {
  const res = await fetch(baseUrl);
  if (!res.ok) throw new Error('Erro ao buscar surveys de formulário');
  return res.json();
}

export async function createFormSurvey(data: FormSurvey): Promise<FormSurvey> {
  const res = await fetch(baseUrl, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao criar survey de formulário');
  return res.json();
}


============================================================


📄 Arquivo : index.ts
📂 Pasta   : .
🧭 Caminho : index.ts
--------------------------------------
📜 Conteúdo:

export * from './userApi';
export * from './activityAnswerApi';
export * from './fieldApi';
export * from './researchApi';
export * from './surveyTimeRangeApi';
export * from './surveyRegionApi';
export * from './surveyGroupApi';
export * from './surveyContributorApi';
export * from './surveyAnswerApi';
export * from './staticSurveyApi';
export * from './formSurveyApi';
export * from './dynamicSurveyApi';
export * from './researchContributorApi';
export * from './inputTypeApi';
export * from './fieldOptionApi';


============================================================


📄 Arquivo : inputTypeApi.ts
📂 Pasta   : .
🧭 Caminho : inputTypeApi.ts
--------------------------------------
📜 Conteúdo:

// src/repositories/server/inputTypeApi.ts
import { InputType } from '@/lib/types/indexeddb';

const baseUrl = '/api/input-types'; // ⚠️ Este endpoint ainda NÃO está implementado em /pages/api

export async function getInputTypes(): Promise<InputType[]> {
  const res = await fetch(baseUrl);
  if (!res.ok) throw new Error('Erro ao buscar tipos de input');
  return res.json();
}


============================================================


📄 Arquivo : researchApi.ts
📂 Pasta   : .
🧭 Caminho : researchApi.ts
--------------------------------------
📜 Conteúdo:

// src/repositories/server/researchApi.ts
import { Research } from '@/lib/types/indexeddb';

const baseUrl = '/api/researches';

export async function getResearches(): Promise<Research[]> {
  const res = await fetch(baseUrl);
  if (!res.ok) throw new Error('Erro ao buscar pesquisas');
  return res.json();
}

export async function getResearchById(id: string): Promise<Research> {
  const res = await fetch(`${baseUrl}/${id}`);
  if (!res.ok) throw new Error('Erro ao buscar pesquisa');
  const { research } = await res.json();
  return research;
}

export async function createResearch(data: Research): Promise<Research> {
  const res = await fetch(`${baseUrl}/create`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao criar pesquisa');
  return res.json();
}

export async function updateResearch(data: Research): Promise<Research> {
  const res = await fetch(`${baseUrl}/update`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao atualizar pesquisa');
  return res.json();
}

export async function deleteResearch(id: string): Promise<{ message: string }> {
  const res = await fetch(`${baseUrl}/delete`, {
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ id }),
  });
  if (!res.ok) throw new Error('Erro ao deletar pesquisa');
  return res.json();
}


============================================================


📄 Arquivo : researchContributorApi.ts
📂 Pasta   : .
🧭 Caminho : researchContributorApi.ts
--------------------------------------
📜 Conteúdo:

// src/repositories/server/researchContributorApi.ts
import { ResearchContributor } from '@/lib/types/indexeddb';

const baseUrl = '/api/research_contributors'; // ⚠️ Este endpoint ainda NÃO está implementado em /pages/api

export async function getResearchContributors(research_id: string): Promise<ResearchContributor[]> {
  const res = await fetch(`${baseUrl}?research_id=${research_id}`);
  if (!res.ok) throw new Error('Erro ao buscar colaboradores da pesquisa');
  return res.json();
}

export async function createResearchContributor(data: ResearchContributor): Promise<ResearchContributor> {
  const res = await fetch(baseUrl, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao criar colaborador da pesquisa');
  return res.json();
}


============================================================


📄 Arquivo : staticSurveyApi.ts
📂 Pasta   : .
🧭 Caminho : staticSurveyApi.ts
--------------------------------------
📜 Conteúdo:

// src/repositories/server/staticSurveyApi.ts
import { StaticSurvey } from '@/lib/types/indexeddb';

const baseUrl = '/api/surveys/static'; // ⚠️ Este endpoint ainda NÃO está implementado em /pages/api

export async function getStaticSurveys(): Promise<StaticSurvey[]> {
  const res = await fetch(baseUrl);
  if (!res.ok) throw new Error('Erro ao buscar surveys estáticos');
  return res.json();
}

export async function createStaticSurvey(data: StaticSurvey): Promise<StaticSurvey> {
  const res = await fetch(baseUrl, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao criar survey estático');
  return res.json();
}


============================================================


📄 Arquivo : surveyAnswerApi.ts
📂 Pasta   : .
🧭 Caminho : surveyAnswerApi.ts
--------------------------------------
📜 Conteúdo:

import { SurveyAnswer } from '@/lib/types/indexeddb';

const baseUrl = '/api/survey-answers'; // ⚠️ Este endpoint ainda NÃO está implementado em /pages/api

export async function getSurveyAnswers(): Promise<SurveyAnswer[]> {
  const res = await fetch(baseUrl);
  if (!res.ok) throw new Error('Erro ao buscar respostas de coleta');
  return res.json();
}

export async function createSurveyAnswer(data: SurveyAnswer): Promise<SurveyAnswer> {
  const res = await fetch(baseUrl, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao criar resposta');
  return res.json();
}


============================================================


📄 Arquivo : surveyContributorApi.ts
📂 Pasta   : .
🧭 Caminho : surveyContributorApi.ts
--------------------------------------
📜 Conteúdo:

import { SurveyContributor } from '@/lib/types/indexeddb';

const baseUrl = '/api/survey_contributors';

export async function getSurveyContributors(survey_id: string, survey_type: string): Promise<SurveyContributor[]> {
  const res = await fetch(baseUrl + '?survey_id=' + survey_id + '&survey_type=' + survey_type);
  if (!res.ok) throw new Error('Erro ao buscar colaboradores da coleta');
  return res.json();
}

export async function createSurveyContributor(data: SurveyContributor): Promise<SurveyContributor> {
  const res = await fetch(`${baseUrl}/create`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao criar colaborador da coleta');
  return res.json();
}

export async function deleteSurveyContributor(data: Pick<SurveyContributor, 'survey_id' | 'survey_type' | 'user_id'>): Promise<{ message: string }> {
  const res = await fetch(`${baseUrl}/delete`, {
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao deletar colaborador');
  return res.json();
}


============================================================


📄 Arquivo : surveyGroupApi.ts
📂 Pasta   : .
🧭 Caminho : surveyGroupApi.ts
--------------------------------------
📜 Conteúdo:

import { SurveyGroup } from '@/lib/types/indexeddb';

const baseUrl = '/api/survey-groups'; // ⚠️ Este endpoint ainda NÃO está implementado em /pages/api

export async function getSurveyGroups(): Promise<SurveyGroup[]> {
  const res = await fetch(baseUrl);
  if (!res.ok) throw new Error('Erro ao buscar grupos da coleta');
  return res.json();
}

export async function createSurveyGroup(data: SurveyGroup): Promise<SurveyGroup> {
  const res = await fetch(baseUrl, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao criar grupo');
  return res.json();
}

export async function updateSurveyGroup(id: string, data: Partial<SurveyGroup>): Promise<SurveyGroup> {
  const res = await fetch(`${baseUrl}/${id}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao atualizar grupo');
  return res.json();
}

export async function deleteSurveyGroup(id: string): Promise<{ message: string }> {
  const res = await fetch(`${baseUrl}/${id}`, {
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
  });
  if (!res.ok) throw new Error('Erro ao deletar grupo');
  return res.json();
}

============================================================


📄 Arquivo : surveyRegionApi.ts
📂 Pasta   : .
🧭 Caminho : surveyRegionApi.ts
--------------------------------------
📜 Conteúdo:

import { SurveyRegion } from '@/lib/types/indexeddb';

const baseUrl = '/api/survey-regions'; // ⚠️ Este endpoint ainda NÃO está implementado em /pages/api

export async function getSurveyRegions(): Promise<SurveyRegion[]> {
  const res = await fetch(baseUrl);
  if (!res.ok) throw new Error('Erro ao buscar regiões da coleta');
  return res.json();
}

export async function createSurveyRegion(data: SurveyRegion): Promise<SurveyRegion> {
  const res = await fetch(baseUrl, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao criar região da coleta');
  return res.json();
}

export async function updateSurveyRegion(id: string, data: Partial<SurveyRegion>): Promise<SurveyRegion> {
  const res = await fetch(`${baseUrl}/${id}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao atualizar região da coleta');
  return res.json();
}

export async function deleteSurveyRegion(id: string): Promise<{ message: string }> {
  const res = await fetch(`${baseUrl}/${id}`, {
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
  });
  if (!res.ok) throw new Error('Erro ao deletar região da coleta');
  return res.json();
}


============================================================


📄 Arquivo : surveyTimeRangeApi.ts
📂 Pasta   : .
🧭 Caminho : surveyTimeRangeApi.ts
--------------------------------------
📜 Conteúdo:

import { SurveyTimeRange } from '@/lib/types/indexeddb';

const baseUrl = '/api/survey-time-ranges'; // ⚠️ Este endpoint ainda NÃO está implementado em /pages/api

export async function getSurveyTimeRanges(): Promise<SurveyTimeRange[]> {
  const res = await fetch(baseUrl);
  if (!res.ok) throw new Error('Erro ao buscar faixas de horário');
  return res.json();
}

export async function createSurveyTimeRange(data: SurveyTimeRange): Promise<SurveyTimeRange> {
  const res = await fetch(baseUrl, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao criar faixa de horário');
  return res.json();
}

export async function updateSurveyTimeRange(id: string, data: Partial<SurveyTimeRange>): Promise<SurveyTimeRange> {
  const res = await fetch(`${baseUrl}/${id}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao atualizar faixa de horário');
  return res.json();
}

export async function deleteSurveyTimeRange(id: string): Promise<{ message: string }> {
  const res = await fetch(`${baseUrl}/${id}`, {
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
  });
  if (!res.ok) throw new Error('Erro ao deletar faixa de horário');
  return res.json();
}


============================================================


📄 Arquivo : userApi.ts
📂 Pasta   : .
🧭 Caminho : userApi.ts
--------------------------------------
📜 Conteúdo:

// src/repositories/server/userApi.ts

import { User } from '@/lib/types/indexeddb';

export async function getUsers(): Promise<User[]> {
  const res = await fetch('/api/users');
  if (!res.ok) throw new Error('Erro ao buscar usuários');
  const data = await res.json();
  return data;
}

export async function getUserById(id: string): Promise<User> {
  const res = await fetch(`/api/users/${id}`);
  if (!res.ok) throw new Error('Erro ao buscar usuário');
  const { user } = await res.json();
  return user;
}

export async function createUser(data: Partial<User>): Promise<User> {
  const res = await fetch('/api/users/register', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao criar usuário');
  return res.json();
}

export async function updateUser(data: Partial<User>): Promise<User> {
  const res = await fetch('/api/users/update', {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Erro ao atualizar usuário');
  return res.json();
}

export async function deleteUser(id: string): Promise<{ message: string }> {
  const res = await fetch('/api/users/delete', {
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ id }),
  });
  if (!res.ok) throw new Error('Erro ao deletar usuário');
  return res.json();
}

============================================================


